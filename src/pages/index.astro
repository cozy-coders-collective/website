---
import Layout from "../layouts/Layout.astro";
import Nav from "../components/Nav.astro";
import Hero from "../components/Hero.astro";
import Footsies from "../components/Footsies.astro";
import FAQ from "../components/FAQ.astro";
import Strengths from "../components/Strengths/Strengths.astro";
import TrashouselWrapper from "../components/Trashousel/TrashouselWrapper";
import MobileNav from "../components/MobileNav.astro";
import FeaturedWork from "../components/FeaturedWork/FeaturedWork.astro";
---

<style>
  .space-bg::before {
    top: 0;
    right: 0;
    content: " ";
    display: block;
    position: absolute;
    background-image: url("/texture.png");
    background-repeat: repeat;
    /* set width media queries w/ tailwind, max is 1000px which is image size */
    height: 100%;
    z-index: -2;
    opacity: 53%;
    mask-image: linear-gradient(to left, red, transparent);
  }
</style>

<Layout title="Cozy Coders' Collective - Home">
  <div
    class="space-bg lg:before:w-[1000px] md:before:w-[800px] before:w-[200px] relative overflow-hidden pb-16"
  >
    <Nav />
    <MobileNav />
    <Hero />
    <FeaturedWork/>
  </div>

  <Strengths />
  <FAQ />
  <Footsies />
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    /// mobile nav menu
    const menuButton: HTMLElement | null =
      document.getElementById("menu-button");
    const mobileNavView: HTMLElement | null =
      document.getElementById("mobile-nav-view");
    const closeButton: HTMLElement | null =
      document.getElementById("close-button");
    const mobileNavViewButtons: HTMLCollectionOf<Element> | null =
      document.getElementsByClassName("mobile-nav-view-button");

    if (menuButton && mobileNavView) {
      menuButton.addEventListener("click", function () {
        mobileNavView.style.animationName = "slide-lr";
        mobileNavView.style.animationPlayState = "running";
        document.body.style.overflow = "hidden";
      });
    }

    if (closeButton && mobileNavView && mobileNavViewButtons) {
      closeButton.addEventListener("click", function () {
        mobileNavView.style.animationName = "slide-rl";
        document.body.style.overflow = "auto";
      });

      for (const button of mobileNavViewButtons) {
        button.addEventListener("click", function () {
          mobileNavView.style.animationName = "slide-rl";
          document.body.style.overflow = "auto";
        });
      }
    }

    //// nav squiggle animation
    let paths: NodeListOf<SVGGeometryElement> | null =
      document.querySelectorAll(".squiggle-animated path");
    if (paths) {
      for (let i = 0; i < paths.length; i++) {
        let path: SVGGeometryElement = paths[i];
        var length: number = path.getTotalLength();
        // Clear any previous transition
        path.style.transition = path.style.webkitTransition = "none";
        path.style.transition = "none";

        // Set up the starting positions
        path.style.strokeDasharray = length + " " + length;
        path.style.strokeDashoffset = length.toString();
        // Trigger a layout so styles are calculated & the browser
        // picks up the starting position before animating
        path.getBoundingClientRect();
        // Define our transition
        path.style.transition = path.style.webkitTransition =
          "stroke-dashoffset 2s ease-in-out";
        path.style.transition = path.style.transition =
          "stroke-dashoffset 2s ease-in-out";
        // Go!
        path.style.strokeDashoffset = "0";
      }
    }

    //// blur nav links
    const items: NodeListOf<HTMLElement> =
      document.querySelectorAll(".my-blur");

    items.forEach((item, index) => {
      item.addEventListener("mouseover", function () {
        applyBlur(index, "4px");
      });

      item.addEventListener("mouseout", function () {
        applyBlur(index, "0px");
      });
    });

    function applyBlur(index: number, blurValue: string) {
      const duration = 300;
      // ease-in-out for a more balanced acceleration
      // and deceleration during both transitions
      const easing = "ease-in-out";

      items.forEach((item, i) => {
        const isHoveredItem = i === index;
        item.style.filter = `blur(${isHoveredItem ? "0" : blurValue})`;
        item.style.transition = `filter ${duration}ms ${easing}`;
      });
    }
  });
</script>